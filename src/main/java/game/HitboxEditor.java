/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package game;

import engine.graphics.Textures;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.image.BufferedImage;
import javax.swing.SpinnerNumberModel;

/**
 *
 * @author cookiebot
 */
public class HitboxEditor extends javax.swing.JFrame {

    Module[] modules;
    
    public static BufferedImage image;
    
    int moduleSelected = -1;
    int frameSelected = 0;
    int hitboxSelected = 1;

    /**
     * Creates new form HitboxEditor
     */
    public HitboxEditor() {
        modules = Modules.getModules();
        initComponents();
        image = Textures.loadImage("/textures/players/blankBodyType2.png");
        module.setModel(new SpinnerNumberModel(1, 1, modules.length, 1));
        AdjustValues();
    }

    public void AdjustValues() {
        if((int)module.getValue()-1 != moduleSelected){
            moduleSelected = (int)module.getValue()-1;
            frame.setModel(new SpinnerNumberModel(0, 0, modules[moduleSelected].animation.length-1, 1));
            frameSelected = -1;
        }
        if((int)frame.getValue() != frameSelected){
            frameSelected = (int)frame.getValue();
            int val = Math.max(Math.min(modules[moduleSelected].hitbox.animation[frameSelected].length,hitboxSelected+1),1);
            int max = Math.max(modules[moduleSelected].hitbox.animation[frameSelected].length,1);
            hitbox.setModel(new SpinnerNumberModel(val,1,max, 1));
            hitboxSelected = -1;
        }
        if((int)hitbox.getValue() -1 != hitboxSelected){
            hitboxSelected = (int)hitbox.getValue() -1;
            if (modules[moduleSelected].hitbox.animation[frameSelected].length == 0
                    || modules[moduleSelected].hitbox.animation[frameSelected][hitboxSelected].radius == 0) {
                SpinnerNumberModel m = new SpinnerNumberModel(0, 0, 0, 1);
                size.setModel(m);
                size.setEnabled(false);
                x.setModel(m);
                x.setEnabled(false);
                y.setModel(m);
                y.setEnabled(false);
                type.setModel(m);
                type.setEnabled(false);
                intensity.setModel(m);
                intensity.setEnabled(false);
            } else {
                HitboxPoint hitboxPoint = modules[moduleSelected].hitbox.animation[frameSelected][hitboxSelected];
                size.setModel(new SpinnerNumberModel(hitboxPoint.radius,1, 50, 1));
                x.setModel(new SpinnerNumberModel(hitboxPoint.x,0, 80, 1));
                y.setModel(new SpinnerNumberModel(100-hitboxPoint.y,0, 100, 1));
                type.setModel(new SpinnerNumberModel(hitboxPoint.type,0, 10, 1));
                intensity.setModel(new SpinnerNumberModel(hitboxPoint.intensity,0, 100, 1));
                
                size.setEnabled(true);
                x.setEnabled(true);
                y.setEnabled(true);
                type.setEnabled(true);
                intensity.setEnabled(true);
            }
        }
        repaintPanel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new CustomPanel();
        module = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        frame = new javax.swing.JSpinner();
        hitbox = new javax.swing.JSpinner();
        jLabel4 = new javax.swing.JLabel();
        size = new javax.swing.JSpinner();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        x = new javax.swing.JSpinner();
        jLabel7 = new javax.swing.JLabel();
        y = new javax.swing.JSpinner();
        jLabel8 = new javax.swing.JLabel();
        type = new javax.swing.JSpinner();
        intensity = new javax.swing.JSpinner();
        jLabel9 = new javax.swing.JLabel();
        addHitbox = new javax.swing.JButton();
        deleteHitbox = new javax.swing.JButton();
        save = new javax.swing.JButton();
        revert = new javax.swing.JButton();
        clone = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(20, 20, 20));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setPreferredSize(new java.awt.Dimension(240, 240));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 240, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        module.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                moduleStateChanged(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Yrsa", 0, 36)); // NOI18N
        jLabel1.setText("Hitbox Editor");

        jLabel2.setFont(new java.awt.Font("Yrsa", 0, 18)); // NOI18N
        jLabel2.setText("Module");

        jLabel3.setFont(new java.awt.Font("Yrsa", 0, 18)); // NOI18N
        jLabel3.setText("Frame");

        frame.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                frameStateChanged(evt);
            }
        });

        hitbox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                hitboxStateChanged(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Yrsa", 0, 18)); // NOI18N
        jLabel4.setText("Hitbox");

        size.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sizeStateChanged(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Yrsa", 0, 18)); // NOI18N
        jLabel5.setText("Size");

        jLabel6.setFont(new java.awt.Font("Yrsa", 0, 18)); // NOI18N
        jLabel6.setText("x");

        x.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                xStateChanged(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Yrsa", 0, 18)); // NOI18N
        jLabel7.setText("y");

        y.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                yStateChanged(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Yrsa", 0, 18)); // NOI18N
        jLabel8.setText("Type");

        type.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                typeStateChanged(evt);
            }
        });

        intensity.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                intensityStateChanged(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Yrsa", 0, 18)); // NOI18N
        jLabel9.setText("Intensity");

        addHitbox.setText("Add Hitbox");
        addHitbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addHitboxActionPerformed(evt);
            }
        });

        deleteHitbox.setText("Remove Hitbox");
        deleteHitbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteHitboxActionPerformed(evt);
            }
        });

        save.setText("Save All");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });

        revert.setText("Revert All");
        revert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                revertActionPerformed(evt);
            }
        });

        clone.setText("Clone Previous Frame");
        clone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cloneActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(frame, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(module, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(hitbox, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(size, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(x, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(y, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(type, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(intensity, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(clone, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(23, 23, 23))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(116, 116, 116)
                                .addComponent(jLabel1))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(addHitbox)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(deleteHitbox)
                                .addGap(44, 44, 44)
                                .addComponent(save)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(revert)))
                        .addContainerGap(12, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(module, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(frame)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(hitbox)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(size)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(x)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(y)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(type)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(intensity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clone, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addHitbox)
                    .addComponent(deleteHitbox)
                    .addComponent(save)
                    .addComponent(revert))
                .addGap(15, 15, 15))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void sizeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sizeStateChanged
        modules[moduleSelected].hitbox.animation[frameSelected][hitboxSelected].radius = (int)size.getValue();
        repaintPanel();
    }//GEN-LAST:event_sizeStateChanged

    private void xStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_xStateChanged
        modules[moduleSelected].hitbox.animation[frameSelected][hitboxSelected].x = (int)x.getValue();
        repaintPanel();
    }//GEN-LAST:event_xStateChanged

    private void yStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_yStateChanged
        modules[moduleSelected].hitbox.animation[frameSelected][hitboxSelected].y = 100-(int)y.getValue();
        repaintPanel();
    }//GEN-LAST:event_yStateChanged

    private void typeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_typeStateChanged
        modules[moduleSelected].hitbox.animation[frameSelected][hitboxSelected].type = (int)type.getValue();
        repaintPanel();
    }//GEN-LAST:event_typeStateChanged

    private void intensityStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_intensityStateChanged
        modules[moduleSelected].hitbox.animation[frameSelected][hitboxSelected].intensity = (int)intensity.getValue();
        repaintPanel();
    }//GEN-LAST:event_intensityStateChanged

    private void cloneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cloneActionPerformed
        if((modules[moduleSelected].hitbox.animation[frameSelected].length == 0 || 
                modules[moduleSelected].hitbox.animation[frameSelected][hitboxSelected].radius == 0) && frameSelected >= 1){
            HitboxPoint[] original = modules[moduleSelected].hitbox.animation[frameSelected-1];
            HitboxPoint[] duplicate = new HitboxPoint[original.length];
            for(int i = 0; i < original.length; i ++){
                duplicate[i] = new HitboxPoint(original[i].x,original[i].y,original[i].radius,original[i].type,original[i].intensity);
            }
            modules[moduleSelected].hitbox.animation[frameSelected] = duplicate;
            frameSelected = -1;
        }
        AdjustValues();
    }//GEN-LAST:event_cloneActionPerformed

    private void deleteHitboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteHitboxActionPerformed
        if(modules[moduleSelected].hitbox.animation[frameSelected].length > 1){
            HitboxPoint[] currentHitboxes = modules[moduleSelected].hitbox.animation[frameSelected];

            // Create a new array with one additional slot for the new hitbox
            HitboxPoint[] newHitboxes = new HitboxPoint[currentHitboxes.length - 1];
            int i2 = 0;
            for (int i = 0; i < currentHitboxes.length; i++) {
                if(i == hitboxSelected) i2 --;
                else {
                    newHitboxes[i2] = currentHitboxes[i];
                }
                i2 ++;
            }

            modules[moduleSelected].hitbox.animation[frameSelected] = newHitboxes;

            frameSelected = -1;
            hitboxSelected --;
        }
        else{
            modules[moduleSelected].hitbox.animation[frameSelected][hitboxSelected] = new HitboxPoint();
            hitboxSelected = -1;
        }
        AdjustValues();
    }//GEN-LAST:event_deleteHitboxActionPerformed

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        Modules.writeHitboxTXT();
    }//GEN-LAST:event_saveActionPerformed

    private void addHitboxActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_addHitboxActionPerformed
        
        HitboxPoint[] currentHitboxes = modules[moduleSelected].hitbox.animation[frameSelected];
        
        if(currentHitboxes.length == 1 && currentHitboxes[0].radius == 0){
            
            modules[moduleSelected].hitbox.animation[frameSelected][0] = new HitboxPoint(40, 50, 10, 1, 100);
            
            hitboxSelected = -1;
            AdjustValues();
            return;
            
        }

        // Create a new array with one additional slot for the new hitbox
        HitboxPoint[] newHitboxes = new HitboxPoint[currentHitboxes.length + 1];
        for (int i = 0; i < currentHitboxes.length; i++) {
            newHitboxes[i] = currentHitboxes[i];
        }
        newHitboxes[newHitboxes.length - 1] = new HitboxPoint(40, 50, 10, 1, 100); // Add the new hitbox

        // Update the appropriate hitbox array
        modules[moduleSelected].hitbox.animation[frameSelected] = newHitboxes;
        
        frameSelected = -1;
        hitboxSelected = newHitboxes.length - 1;
        
        AdjustValues();
    }// GEN-LAST:event_addHitboxActionPerformed

    private void revertActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_revertActionPerformed
        Modules.resetModules();
        moduleSelected = -1;
        AdjustValues();
    }// GEN-LAST:event_revertActionPerformed

    private void moduleStateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_moduleStateChanged
        AdjustValues();
    }// GEN-LAST:event_moduleStateChanged

    private void frameStateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_frameStateChanged
        AdjustValues();
    }// GEN-LAST:event_frameStateChanged

    private void hitboxStateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_hitboxStateChanged
        AdjustValues();
    }// GEN-LAST:event_hitboxStateChanged
    
    public void repaintPanel(){
        
        Image currentImage = modules[moduleSelected].animation[frameSelected];
        HitboxPoint[] hitboxframe = modules[moduleSelected].hitbox.animation[frameSelected];

        jPanel2.setImageAndHitboxes(currentImage,hitboxframe,hitboxSelected);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        // <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
        // (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the default
         * look and feel.
         * For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HitboxEditor.class.getName()).log(java.util.logging.Level.SEVERE, null,
                    ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HitboxEditor.class.getName()).log(java.util.logging.Level.SEVERE, null,
                    ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HitboxEditor.class.getName()).log(java.util.logging.Level.SEVERE, null,
                    ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HitboxEditor.class.getName()).log(java.util.logging.Level.SEVERE, null,
                    ex);
        }
        // </editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HitboxEditor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addHitbox;
    private javax.swing.JButton clone;
    private javax.swing.JButton deleteHitbox;
    private javax.swing.JSpinner frame;
    private javax.swing.JSpinner hitbox;
    private javax.swing.JSpinner intensity;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private CustomPanel jPanel2;
    private javax.swing.JSpinner module;
    private javax.swing.JButton revert;
    private javax.swing.JButton save;
    private javax.swing.JSpinner size;
    private javax.swing.JSpinner type;
    private javax.swing.JSpinner x;
    private javax.swing.JSpinner y;
    // End of variables declaration//GEN-END:variables
}

// Custom JPanel class for drawing
class CustomPanel extends javax.swing.JPanel {
    private Image backgroundImage; // To store the image
    private HitboxPoint[] hitboxFrame;      // To store the hitbox data
    private int hitboxSelected;
    int scale = 3;

    // Method to set the image and hitbox frame
    public void setImageAndHitboxes(Image image, HitboxPoint[] hitboxes, int hitboxSelected) {
        this.backgroundImage = image;
        this.hitboxFrame = hitboxes;
        this.hitboxSelected = hitboxSelected;
        repaint(); // Trigger a repaint to update the panel
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g); // Call the superclass method to ensure proper rendering
        Graphics2D g2d = (Graphics2D) g;

        // Draw the background image if it exists
        g.setColor(new Color(240,240,240));
        g.fillRect(0, 0,getWidth(), getHeight());
        if (backgroundImage != null) {
            g2d.drawImage(backgroundImage, 0, 0, getWidth(), getHeight(), this);
        }

        // Draw the hitboxes if they exist
        if (hitboxFrame != null) {
            for (int i = 0; i < hitboxFrame.length; i ++) {
                
                if(hitboxSelected != i ){
                    HitboxPoint hitbox = hitboxFrame[i];
                    switch(hitbox.type){
                        case 0 -> g2d.setColor(Color.RED);
                        case 1 -> g2d.setColor(Color.GREEN);
                        case 2 -> g2d.setColor(Color.BLUE);
                        case 3 -> g2d.setColor(Color.YELLOW);
                        default -> g2d.setColor(Color.DARK_GRAY);
                    }
                    int opacity = (int)(hitbox.intensity+100);
                    g2d.setColor(new Color(g2d.getColor().getRed(),g2d.getColor().getGreen(),g2d.getColor().getBlue(),opacity));
                    // Draw each hitbox as a circle based on its properties
                    int x = hitbox.x*scale;
                    int y = hitbox.y*scale;

                    int size = hitbox.radius * 2*scale; // Assuming radius is half the size
                    g2d.fillOval(x - hitbox.radius*scale, y - hitbox.radius*scale, size, size); // Draw circle
                }
            }
            HitboxPoint hitbox = hitboxFrame[hitboxSelected];
            switch(hitbox.type){
                case 0 -> g2d.setColor(Color.RED);
                case 1 -> g2d.setColor(Color.GREEN);
                case 2 -> g2d.setColor(Color.BLUE);
                case 3 -> g2d.setColor(Color.YELLOW);
                default -> g2d.setColor(Color.DARK_GRAY);
            }
            int opacity = (int)(hitbox.intensity*1.5 + 50);
            g2d.setColor(new Color(g2d.getColor().getRed(),g2d.getColor().getGreen(),g2d.getColor().getBlue(),opacity));
            // Draw each hitbox as a circle based on its properties
            int x = hitbox.x*scale;
            int y = hitbox.y*scale;

            int size = hitbox.radius * 2*scale; // Assuming radius is half the size
            g2d.fillOval(x - hitbox.radius*scale, y - hitbox.radius*scale, size, size); // Draw circle
            g2d.setStroke(new BasicStroke(4));
            g2d.setColor(new Color(g2d.getColor().getRed(),g2d.getColor().getGreen(),g2d.getColor().getBlue(),255));
            g2d.drawOval(x - hitbox.radius*scale, y - hitbox.radius*scale, size, size); // Draw circle
            g2d.drawImage(HitboxEditor.image, 0, getHeight()-getHeight()/5, getWidth(), (getHeight()/5)*4, this);
        }
    }
}